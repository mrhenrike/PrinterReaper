# Remaining help methods to be added to pjl.py

## After do_display (line ~653)
    def help_display(self):
        """Show help for display command"""
        print()
        print("display - Set printer's display message")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Changes the message shown on the printer's control panel display.")
        print("  Useful for sending messages or testing display functionality.")
        print()
        print("USAGE:")
        print("  display <message>")
        print()
        print("EXAMPLES:")
        print("  display 'System Maintenance'     # Show maintenance message")
        print("  display 'Printer hacked'         # Demonstration message")
        print("  display 'Out of service'         # Service notice")
        print()
        print("NOTES:")
        print("  - Message length limited by printer")
        print("  - Some printers ignore this command")
        print("  - Can be used for social engineering")
        print("  - Display reverts after timeout or job")
        print()

## After do_offline (line ~665)
    def help_offline(self):
        """Show help for offline command"""
        print()
        print("offline - Take printer offline with custom message")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Takes the printer offline and displays a custom message on the")
        print("  control panel. Printer will not accept new jobs until brought back online.")
        print()
        print("USAGE:")
        print("  offline <message>")
        print()
        print("EXAMPLES:")
        print("  offline 'Under maintenance'      # Maintenance mode")
        print("  offline 'Reserved for testing'   # Reserve printer")
        print("  offline 'System upgrade'         # Upgrade notice")
        print()
        print("NOTES:")
        print("  - Printer stops accepting jobs")
        print("  - User must manually bring printer online")
        print("  - Can be used for denial of service")
        print("  - Some printers may ignore this command")
        print()

## After do_restart (line ~678)
    def help_restart(self):
        """Show help for restart command"""
        print()
        print("restart - Restart the printer")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Performs a soft reset of the printer, restarting the print")
        print("  engine and reinitializing all settings. Clears current job queue.")
        print()
        print("USAGE:")
        print("  restart")
        print()
        print("EXAMPLES:")
        print("  restart                          # Restart printer")
        print()
        print("NOTES:")
        print("  - All queued jobs will be lost")
        print("  - Printer will be offline during restart")
        print("  - Settings are preserved (not factory reset)")
        print("  - Takes 30-60 seconds to complete")
        print("  - Use reset for factory defaults")
        print()

## After do_reset (line ~689)
    def help_reset(self):
        """Show help for reset command"""
        print()
        print("reset - Reset printer to factory defaults")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Resets all printer settings to factory defaults. This is a")
        print("  destructive operation that cannot be undone. All custom settings,")
        print("  network configurations, and stored data will be lost.")
        print()
        print("USAGE:")
        print("  reset")
        print()
        print("EXAMPLES:")
        print("  reset                            # Reset to factory defaults")
        print()
        print("NOTES:")
        print("  - Requires confirmation (type 'yes')")
        print("  - All settings will be lost")
        print("  - Network configuration will be reset")
        print("  - Cannot be undone")
        print("  - Use restart for simple reboot")
        print("  - Printer will need reconfiguration")
        print()

## After do_selftest (line ~714)
    def help_selftest(self):
        """Show help for selftest command"""
        print()
        print("selftest - Perform printer self-tests")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Runs various diagnostic tests on the printer to verify")
        print("  functionality. Includes print test, network test, memory test.")
        print()
        print("USAGE:")
        print("  selftest")
        print()
        print("TEST OPTIONS:")
        print("  1. Print test page    - Tests print engine")
        print("  2. Network test       - Tests network connectivity")
        print("  3. Memory test        - Tests RAM integrity")
        print("  4. All tests          - Runs complete diagnostic suite")
        print()
        print("EXAMPLES:")
        print("  selftest                         # Interactive test selection")
        print()
        print("NOTES:")
        print("  - Tests may take several minutes")
        print("  - Test page will be printed for option 1")
        print("  - Some printers have limited test support")
        print("  - Useful for troubleshooting hardware issues")
        print()

## After do_backup (line ~728)
    def help_backup(self):
        """Show help for backup command"""
        print()
        print("backup - Backup printer configuration")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Retrieves the current printer configuration and saves it to")
        print("  a local file. Useful for backup before making changes.")
        print()
        print("USAGE:")
        print("  backup <filename>")
        print()
        print("EXAMPLES:")
        print("  backup config.backup             # Save configuration")
        print("  backup printer_$(date).cfg       # Timestamped backup")
        print("  backup /backups/printer.cfg      # Full path backup")
        print()
        print("NOTES:")
        print("  - Saves current configuration to local file")
        print("  - Does not include print jobs")
        print("  - Use before making risky changes")
        print("  - Use restore to apply backed up configuration")
        print()

## After do_restore (line ~745)
    def help_restore(self):
        """Show help for restore command"""
        print()
        print("restore - Restore printer configuration from backup")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Loads a previously saved printer configuration from a backup")
        print("  file. Note: automatic restoration may not be supported on all printers.")
        print()
        print("USAGE:")
        print("  restore <filename>")
        print()
        print("EXAMPLES:")
        print("  restore config.backup            # Restore from backup")
        print("  restore /backups/printer.cfg     # Restore from path")
        print()
        print("NOTES:")
        print("  - Backup file must exist")
        print("  - Manual configuration may be required")
        print("  - Not all settings may be restorable via PJL")
        print("  - Test in safe environment first")
        print("  - May require printer restart")
        print()

## After do_lock (line ~776)
    def help_lock(self):
        """Show help for lock command"""
        print()
        print("lock - Lock printer control panel and disk access")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Sets a PIN code to lock the printer's control panel settings")
        print("  and restrict disk write access. Prevents unauthorized changes.")
        print()
        print("USAGE:")
        print("  lock [PIN]")
        print()
        print("EXAMPLES:")
        print("  lock 12345                       # Lock with PIN 12345")
        print("  lock                             # Prompt for PIN")
        print()
        print("NOTES:")
        print("  - PIN must be between 1 and 65535")
        print("  - Remember the PIN - recovery may not be possible")
        print("  - Use unlock command to remove lock")
        print("  - Some printers don't support this feature")
        print("  - Can be used for security or denial of service")
        print()

## After do_unlock (line ~789)
    def help_unlock(self):
        """Show help for unlock command"""
        print()
        print("unlock - Unlock printer control panel and disk access")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Removes the PIN code lock from the printer, restoring normal")
        print("  access to control panel and disk write operations.")
        print()
        print("USAGE:")
        print("  unlock [PIN]")
        print()
        print("EXAMPLES:")
        print("  unlock 12345                     # Unlock with PIN 12345")
        print("  unlock                           # Prompt for PIN")
        print()
        print("NOTES:")
        print("  - Correct PIN required (or try brute force)")
        print("  - Setting PIN to 0 removes lock")
        print("  - Use unlock_bruteforce for PIN recovery")
        print("  - Some printers have limited unlock support")
        print()

## After do_disable (line ~804)
    def help_disable(self):
        """Show help for disable command"""
        print()
        print("disable - Disable printer functionality")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Disables the printer by setting incompatible job media settings.")
        print("  Effectively prevents the printer from accepting print jobs.")
        print()
        print("USAGE:")
        print("  disable")
        print()
        print("EXAMPLES:")
        print("  disable                          # Disable printer")
        print()
        print("NOTES:")
        print("  - Printer will reject print jobs")
        print("  - Can be used for denial of service")
        print("  - May require manual intervention to recover")
        print("  - Use with extreme caution")
        print("  - Some printers may not be affected")
        print()

## After do_nvram (line ~819)
    def help_nvram(self):
        """Show help for nvram command"""
        print()
        print("nvram - Access and manipulate NVRAM")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Accesses the printer's non-volatile RAM (NVRAM) which stores")
        print("  settings, passwords, and configuration data.")
        print()
        print("USAGE:")
        print("  nvram <dump|set|get> [options]")
        print()
        print("OPERATIONS:")
        print("  dump  - Dump entire NVRAM contents")
        print("  set   - Set NVRAM value (not implemented)")
        print("  get   - Get NVRAM value (not implemented)")
        print()
        print("EXAMPLES:")
        print("  nvram dump                       # Dump all NVRAM")
        print()
        print("NOTES:")
        print("  - May contain sensitive information")
        print("  - Passwords may be stored in NVRAM")
        print("  - Useful for information disclosure")
        print("  - Some data may be encrypted")
        print()

## After do_destroy (line ~850)
    def help_destroy(self):
        """Show help for destroy command"""
        print()
        print("destroy - Attempt to cause physical damage to NVRAM")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  **DESTRUCTIVE ATTACK** - Attempts to cause physical damage")
        print("  to the printer's NVRAM by repeatedly writing invalid data.")
        print("  May permanently damage the printer.")
        print()
        print("USAGE:")
        print("  destroy")
        print()
        print("EXAMPLES:")
        print("  destroy                          # Execute destructive attack")
        print()
        print("WARNINGS:")
        print("  ⚠️  MAY CAUSE PERMANENT HARDWARE DAMAGE")
        print("  ⚠️  CANNOT BE UNDONE")
        print("  ⚠️  FOR RESEARCH PURPOSES ONLY")
        print("  ⚠️  REQUIRES EXPLICIT CONFIRMATION")
        print()
        print("NOTES:")
        print("  - Use only in authorized testing")
        print("  - May brick the printer")
        print("  - Requires 'yes' confirmation")
        print()

## After do_flood (line ~861)
    def help_flood(self):
        """Show help for flood command"""
        print()
        print("flood - Flood printer input to test for buffer overflows")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Sends a large amount of data to test for buffer overflow")
        print("  vulnerabilities in the printer's input handling.")
        print()
        print("USAGE:")
        print("  flood [size]")
        print()
        print("EXAMPLES:")
        print("  flood                            # Flood with 10000 bytes")
        print("  flood 50000                      # Flood with 50000 bytes")
        print("  flood 100000                     # Large flood test")
        print()
        print("NOTES:")
        print("  - Default size is 10000 bytes")
        print("  - May crash or hang the printer")
        print("  - Used to discover buffer overflow vulnerabilities")
        print("  - Printer may need restart after flooding")
        print()

## After do_hold (line ~870)
    def help_hold(self):
        """Show help for hold command"""
        print()
        print("hold - Enable job retention on the printer")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Enables job retention mode, causing print jobs to be held")
        print("  in memory rather than printed immediately.")
        print()
        print("USAGE:")
        print("  hold")
        print()
        print("EXAMPLES:")
        print("  hold                             # Enable job retention")
        print()
        print("NOTES:")
        print("  - Jobs are held until manually released")
        print("  - Can be used to capture print jobs")
        print("  - Use capture command to retrieve held jobs")
        print("  - May fill up printer memory")
        print()

## After do_format (line ~882)
    def help_format(self):
        """Show help for format command"""
        print()
        print("format - Initialize/format printer's file system")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  **DESTRUCTIVE** - Formats the printer's mass storage device,")
        print("  erasing all stored files, configurations, and data.")
        print()
        print("USAGE:")
        print("  format")
        print()
        print("EXAMPLES:")
        print("  format                           # Format file system")
        print()
        print("WARNINGS:")
        print("  ⚠️  ALL DATA WILL BE LOST")
        print("  ⚠️  CANNOT BE UNDONE")
        print("  ⚠️  REQUIRES CONFIRMATION")
        print()
        print("NOTES:")
        print("  - Erases all files and directories")
        print("  - Cannot be undone")
        print("  - Requires 'yes' confirmation")
        print("  - Use for cleanup or anti-forensics")
        print()

## After do_network (line ~902)
    def help_network(self):
        """Show help for network command"""
        print()
        print("network - Show comprehensive network information")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Displays detailed network configuration including IP address,")
        print("  MAC address, network settings, and WiFi information if available.")
        print()
        print("USAGE:")
        print("  network")
        print()
        print("EXAMPLES:")
        print("  network                          # Show all network info")
        print()
        print("NOTES:")
        print("  - Shows IP configuration")
        print("  - Displays MAC address")
        print("  - Includes WiFi information if available")
        print("  - Shows network interface details")
        print("  - Useful for network reconnaissance")
        print()

## After do_direct (line ~919)
    def help_direct(self):
        """Show help for direct command"""
        print()
        print("direct - Show direct-print configuration")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Displays the printer's direct-print configuration, showing")
        print("  how the printer handles direct port printing.")
        print()
        print("USAGE:")
        print("  direct")
        print()
        print("EXAMPLES:")
        print("  direct                           # Show direct-print config")
        print()
        print("NOTES:")
        print("  - Shows direct printing settings")
        print("  - Not all printers support this")
        print("  - Useful for understanding print flow")
        print()

## After do_execute (line ~931)
    def help_execute(self):
        """Show help for execute command"""
        print()
        print("execute - Execute arbitrary PJL command")
        print("=" * 60)
        print("DESCRIPTION:")
        print("  Sends a raw PJL command directly to the printer without")
        print("  interpretation. Useful for testing custom commands.")
        print()
        print("USAGE:")
        print("  execute <command>")
        print()
        print("EXAMPLES:")
        print("  execute @PJL INFO STATUS         # Get status")
        print("  execute @PJL SET TIMEOUT=90      # Set timeout")
        print("  execute @PJL INQUIRE COPIES      # Query setting")
        print()
        print("NOTES:")
        print("  - Command is sent as-is")
        print("  - No validation performed")
        print("  - Use for testing custom PJL commands")
        print("  - Requires knowledge of PJL syntax")
        print("  - May crash printer if invalid")
        print()

